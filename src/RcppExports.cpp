// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calc_column_widths
SEXP calc_column_widths(Reference sheet_data, std::vector<std::string> sharedStrings, IntegerVector autoColumns, NumericVector widths, float baseFontCharWidth, float minW, float maxW);
RcppExport SEXP openxlsx_calc_column_widths(SEXP sheet_dataSEXP, SEXP sharedStringsSEXP, SEXP autoColumnsSEXP, SEXP widthsSEXP, SEXP baseFontCharWidthSEXP, SEXP minWSEXP, SEXP maxWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Reference >::type sheet_data(sheet_dataSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sharedStrings(sharedStringsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type autoColumns(autoColumnsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type widths(widthsSEXP);
    Rcpp::traits::input_parameter< float >::type baseFontCharWidth(baseFontCharWidthSEXP);
    Rcpp::traits::input_parameter< float >::type minW(minWSEXP);
    Rcpp::traits::input_parameter< float >::type maxW(maxWSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_column_widths(sheet_data, sharedStrings, autoColumns, widths, baseFontCharWidth, minW, maxW));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_excel_ref
SEXP convert_to_excel_ref(IntegerVector cols, std::vector<std::string> LETTERS);
RcppExport SEXP openxlsx_convert_to_excel_ref(SEXP colsSEXP, SEXP LETTERSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type LETTERS(LETTERSSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_excel_ref(cols, LETTERS));
    return rcpp_result_gen;
END_RCPP
}
// convert_from_excel_ref
IntegerVector convert_from_excel_ref(CharacterVector x);
RcppExport SEXP openxlsx_convert_from_excel_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_from_excel_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_excel_ref_expand
SEXP convert_to_excel_ref_expand(const std::vector<int>& cols, const std::vector<std::string>& LETTERS, const std::vector<std::string>& rows);
RcppExport SEXP openxlsx_convert_to_excel_ref_expand(SEXP colsSEXP, SEXP LETTERSSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type LETTERS(LETTERSSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_excel_ref_expand(cols, LETTERS, rows));
    return rcpp_result_gen;
END_RCPP
}
// isInternalHyperlink
LogicalVector isInternalHyperlink(CharacterVector x);
RcppExport SEXP openxlsx_isInternalHyperlink(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isInternalHyperlink(x));
    return rcpp_result_gen;
END_RCPP
}
// writeFile
SEXP writeFile(std::string parent, std::string xmlText, std::string parentEnd, std::string R_fileName);
RcppExport SEXP openxlsx_writeFile(SEXP parentSEXP, SEXP xmlTextSEXP, SEXP parentEndSEXP, SEXP R_fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< std::string >::type xmlText(xmlTextSEXP);
    Rcpp::traits::input_parameter< std::string >::type parentEnd(parentEndSEXP);
    Rcpp::traits::input_parameter< std::string >::type R_fileName(R_fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(writeFile(parent, xmlText, parentEnd, R_fileName));
    return rcpp_result_gen;
END_RCPP
}
// cppReadFile
std::string cppReadFile(std::string xmlFile);
RcppExport SEXP openxlsx_cppReadFile(SEXP xmlFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xmlFile(xmlFileSEXP);
    rcpp_result_gen = Rcpp::wrap(cppReadFile(xmlFile));
    return rcpp_result_gen;
END_RCPP
}
// read_file_newline
std::string read_file_newline(std::string xmlFile);
RcppExport SEXP openxlsx_read_file_newline(SEXP xmlFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xmlFile(xmlFileSEXP);
    rcpp_result_gen = Rcpp::wrap(read_file_newline(xmlFile));
    return rcpp_result_gen;
END_RCPP
}
// get_letters
std::vector<std::string> get_letters();
RcppExport SEXP openxlsx_get_letters() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_letters());
    return rcpp_result_gen;
END_RCPP
}
// loadworksheets
SEXP loadworksheets(Reference wb, List styleObjects, std::vector<std::string> xmlFiles, LogicalVector is_chart_sheet);
RcppExport SEXP openxlsx_loadworksheets(SEXP wbSEXP, SEXP styleObjectsSEXP, SEXP xmlFilesSEXP, SEXP is_chart_sheetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Reference >::type wb(wbSEXP);
    Rcpp::traits::input_parameter< List >::type styleObjects(styleObjectsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xmlFiles(xmlFilesSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_chart_sheet(is_chart_sheetSEXP);
    rcpp_result_gen = Rcpp::wrap(loadworksheets(wb, styleObjects, xmlFiles, is_chart_sheet));
    return rcpp_result_gen;
END_RCPP
}
// getNodes
SEXP getNodes(std::string xml, std::string tagIn);
RcppExport SEXP openxlsx_getNodes(SEXP xmlSEXP, SEXP tagInSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    Rcpp::traits::input_parameter< std::string >::type tagIn(tagInSEXP);
    rcpp_result_gen = Rcpp::wrap(getNodes(xml, tagIn));
    return rcpp_result_gen;
END_RCPP
}
// getOpenClosedNode
SEXP getOpenClosedNode(std::string xml, std::string open_tag, std::string close_tag);
RcppExport SEXP openxlsx_getOpenClosedNode(SEXP xmlSEXP, SEXP open_tagSEXP, SEXP close_tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    Rcpp::traits::input_parameter< std::string >::type open_tag(open_tagSEXP);
    Rcpp::traits::input_parameter< std::string >::type close_tag(close_tagSEXP);
    rcpp_result_gen = Rcpp::wrap(getOpenClosedNode(xml, open_tag, close_tag));
    return rcpp_result_gen;
END_RCPP
}
// getAttr
SEXP getAttr(CharacterVector x, std::string tag);
RcppExport SEXP openxlsx_getAttr(SEXP xSEXP, SEXP tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type tag(tagSEXP);
    rcpp_result_gen = Rcpp::wrap(getAttr(x, tag));
    return rcpp_result_gen;
END_RCPP
}
// getChildlessNode_ss
std::vector<std::string> getChildlessNode_ss(std::string xml, std::string tag);
RcppExport SEXP openxlsx_getChildlessNode_ss(SEXP xmlSEXP, SEXP tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    Rcpp::traits::input_parameter< std::string >::type tag(tagSEXP);
    rcpp_result_gen = Rcpp::wrap(getChildlessNode_ss(xml, tag));
    return rcpp_result_gen;
END_RCPP
}
// getChildlessNode
CharacterVector getChildlessNode(std::string xml, std::string tag);
RcppExport SEXP openxlsx_getChildlessNode(SEXP xmlSEXP, SEXP tagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    Rcpp::traits::input_parameter< std::string >::type tag(tagSEXP);
    rcpp_result_gen = Rcpp::wrap(getChildlessNode(xml, tag));
    return rcpp_result_gen;
END_RCPP
}
// get_extLst_Major
CharacterVector get_extLst_Major(std::string xml);
RcppExport SEXP openxlsx_get_extLst_Major(SEXP xmlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xml(xmlSEXP);
    rcpp_result_gen = Rcpp::wrap(get_extLst_Major(xml));
    return rcpp_result_gen;
END_RCPP
}
// cell_ref_to_col
int cell_ref_to_col(std::string x);
RcppExport SEXP openxlsx_cell_ref_to_col(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cell_ref_to_col(x));
    return rcpp_result_gen;
END_RCPP
}
// int_2_cell_ref
CharacterVector int_2_cell_ref(IntegerVector cols);
RcppExport SEXP openxlsx_int_2_cell_ref(SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(int_2_cell_ref(cols));
    return rcpp_result_gen;
END_RCPP
}
// get_shared_strings
CharacterVector get_shared_strings(std::string xmlFile, bool isFile);
RcppExport SEXP openxlsx_get_shared_strings(SEXP xmlFileSEXP, SEXP isFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xmlFile(xmlFileSEXP);
    Rcpp::traits::input_parameter< bool >::type isFile(isFileSEXP);
    rcpp_result_gen = Rcpp::wrap(get_shared_strings(xmlFile, isFile));
    return rcpp_result_gen;
END_RCPP
}
// getCellInfo
List getCellInfo(std::string xmlFile, CharacterVector sharedStrings, bool skipEmptyRows, int startRow, IntegerVector rows, bool getDates);
RcppExport SEXP openxlsx_getCellInfo(SEXP xmlFileSEXP, SEXP sharedStringsSEXP, SEXP skipEmptyRowsSEXP, SEXP startRowSEXP, SEXP rowsSEXP, SEXP getDatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type xmlFile(xmlFileSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sharedStrings(sharedStringsSEXP);
    Rcpp::traits::input_parameter< bool >::type skipEmptyRows(skipEmptyRowsSEXP);
    Rcpp::traits::input_parameter< int >::type startRow(startRowSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< bool >::type getDates(getDatesSEXP);
    rcpp_result_gen = Rcpp::wrap(getCellInfo(xmlFile, sharedStrings, skipEmptyRows, startRow, rows, getDates));
    return rcpp_result_gen;
END_RCPP
}
// read_workbook
SEXP read_workbook(IntegerVector cols_in, IntegerVector rows_in, CharacterVector v, IntegerVector string_inds, LogicalVector is_date, bool hasColNames, bool skipEmptyRows, bool skipEmptyCols, int nRows, Function clean_names);
RcppExport SEXP openxlsx_read_workbook(SEXP cols_inSEXP, SEXP rows_inSEXP, SEXP vSEXP, SEXP string_indsSEXP, SEXP is_dateSEXP, SEXP hasColNamesSEXP, SEXP skipEmptyRowsSEXP, SEXP skipEmptyColsSEXP, SEXP nRowsSEXP, SEXP clean_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cols_in(cols_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows_in(rows_inSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type string_inds(string_indsSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_date(is_dateSEXP);
    Rcpp::traits::input_parameter< bool >::type hasColNames(hasColNamesSEXP);
    Rcpp::traits::input_parameter< bool >::type skipEmptyRows(skipEmptyRowsSEXP);
    Rcpp::traits::input_parameter< bool >::type skipEmptyCols(skipEmptyColsSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< Function >::type clean_names(clean_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(read_workbook(cols_in, rows_in, v, string_inds, is_date, hasColNames, skipEmptyRows, skipEmptyCols, nRows, clean_names));
    return rcpp_result_gen;
END_RCPP
}
// calc_number_rows
int calc_number_rows(CharacterVector x, bool skipEmptyRows);
RcppExport SEXP openxlsx_calc_number_rows(SEXP xSEXP, SEXP skipEmptyRowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type skipEmptyRows(skipEmptyRowsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_number_rows(x, skipEmptyRows));
    return rcpp_result_gen;
END_RCPP
}
// map_cell_types_to_integer
IntegerVector map_cell_types_to_integer(CharacterVector t);
RcppExport SEXP openxlsx_map_cell_types_to_integer(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(map_cell_types_to_integer(t));
    return rcpp_result_gen;
END_RCPP
}
// map_cell_types_to_char
CharacterVector map_cell_types_to_char(IntegerVector t);
RcppExport SEXP openxlsx_map_cell_types_to_char(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(map_cell_types_to_char(t));
    return rcpp_result_gen;
END_RCPP
}
// build_cell_types_integer
IntegerVector build_cell_types_integer(CharacterVector classes, int n_rows);
RcppExport SEXP openxlsx_build_cell_types_integer(SEXP classesSEXP, SEXP n_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_cell_types_integer(classes, n_rows));
    return rcpp_result_gen;
END_RCPP
}
// buildCellTypes
CharacterVector buildCellTypes(CharacterVector classes, int nRows);
RcppExport SEXP openxlsx_buildCellTypes(SEXP classesSEXP, SEXP nRowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildCellTypes(classes, nRows));
    return rcpp_result_gen;
END_RCPP
}
// build_cell_merges
List build_cell_merges(List comps);
RcppExport SEXP openxlsx_build_cell_merges(SEXP compsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type comps(compsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_cell_merges(comps));
    return rcpp_result_gen;
END_RCPP
}
// buildCellList
List buildCellList(CharacterVector r, CharacterVector t, CharacterVector v);
RcppExport SEXP openxlsx_buildCellList(SEXP rSEXP, SEXP tSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(buildCellList(r, t, v));
    return rcpp_result_gen;
END_RCPP
}
// write_worksheet_xml
SEXP write_worksheet_xml(std::string prior, std::string post, Reference sheet_data, std::string R_fileName);
RcppExport SEXP openxlsx_write_worksheet_xml(SEXP priorSEXP, SEXP postSEXP, SEXP sheet_dataSEXP, SEXP R_fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< std::string >::type post(postSEXP);
    Rcpp::traits::input_parameter< Reference >::type sheet_data(sheet_dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type R_fileName(R_fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(write_worksheet_xml(prior, post, sheet_data, R_fileName));
    return rcpp_result_gen;
END_RCPP
}
// buildMatrixNumeric
SEXP buildMatrixNumeric(CharacterVector v, IntegerVector rowInd, IntegerVector colInd, CharacterVector colNames, int nRows, int nCols);
RcppExport SEXP openxlsx_buildMatrixNumeric(SEXP vSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP colNamesSEXP, SEXP nRowsSEXP, SEXP nColsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< int >::type nCols(nColsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildMatrixNumeric(v, rowInd, colInd, colNames, nRows, nCols));
    return rcpp_result_gen;
END_RCPP
}
// buildMatrixMixed
SEXP buildMatrixMixed(CharacterVector v, IntegerVector rowInd, IntegerVector colInd, CharacterVector colNames, int nRows, int nCols, IntegerVector charCols, IntegerVector dateCols);
RcppExport SEXP openxlsx_buildMatrixMixed(SEXP vSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP colNamesSEXP, SEXP nRowsSEXP, SEXP nColsSEXP, SEXP charColsSEXP, SEXP dateColsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< int >::type nRows(nRowsSEXP);
    Rcpp::traits::input_parameter< int >::type nCols(nColsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type charCols(charColsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dateCols(dateColsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildMatrixMixed(v, rowInd, colInd, colNames, nRows, nCols, charCols, dateCols));
    return rcpp_result_gen;
END_RCPP
}
// matrixRowInds
IntegerVector matrixRowInds(IntegerVector indices);
RcppExport SEXP openxlsx_matrixRowInds(SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixRowInds(indices));
    return rcpp_result_gen;
END_RCPP
}
// build_table_xml
CharacterVector build_table_xml(std::string table, std::string tableStyleXML, std::string ref, std::vector<std::string> colNames, bool showColNames, bool withFilter);
RcppExport SEXP openxlsx_build_table_xml(SEXP tableSEXP, SEXP tableStyleXMLSEXP, SEXP refSEXP, SEXP colNamesSEXP, SEXP showColNamesSEXP, SEXP withFilterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type table(tableSEXP);
    Rcpp::traits::input_parameter< std::string >::type tableStyleXML(tableStyleXMLSEXP);
    Rcpp::traits::input_parameter< std::string >::type ref(refSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< bool >::type showColNames(showColNamesSEXP);
    Rcpp::traits::input_parameter< bool >::type withFilter(withFilterSEXP);
    rcpp_result_gen = Rcpp::wrap(build_table_xml(table, tableStyleXML, ref, colNames, showColNames, withFilter));
    return rcpp_result_gen;
END_RCPP
}
// write_worksheet_xml_2
SEXP write_worksheet_xml_2(std::string prior, std::string post, Reference sheet_data, CharacterVector row_heights, std::string R_fileName);
RcppExport SEXP openxlsx_write_worksheet_xml_2(SEXP priorSEXP, SEXP postSEXP, SEXP sheet_dataSEXP, SEXP row_heightsSEXP, SEXP R_fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< std::string >::type post(postSEXP);
    Rcpp::traits::input_parameter< Reference >::type sheet_data(sheet_dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type row_heights(row_heightsSEXP);
    Rcpp::traits::input_parameter< std::string >::type R_fileName(R_fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(write_worksheet_xml_2(prior, post, sheet_data, row_heights, R_fileName));
    return rcpp_result_gen;
END_RCPP
}
